name: Tests

on:
  push:
  pull_request:

jobs:
  test:
    name: Test ${{ matrix.os }} (${{ matrix.build_type }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [Debug]
    env:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build git valgrind libx11-dev libxcursor-dev libxrandr-dev libxi-dev libxinerama-dev libglu1-mesa-dev libgl1-mesa-dev
          git clone --depth 1 --branch 5.0 https://github.com/raysan5/raylib.git
          cmake -S raylib -B raylib/build -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=$HOME/raylib
          cmake --build raylib/build --target raylib
          cmake --install raylib/build
          echo "RAYLIB_HOME=$HOME/raylib" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$HOME/raylib" >> $GITHUB_ENV
        shell: bash

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake ninja raylib
          RAYLIB_PREFIX=$(brew --prefix raylib)
          echo "RAYLIB_HOME=$RAYLIB_PREFIX" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$RAYLIB_PREFIX" >> $GITHUB_ENV
        shell: bash

      - name: Configure dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $raylibPath = Join-Path $env:GITHUB_WORKSPACE 'dependencies/raylib'
          if (-not (Test-Path -LiteralPath $raylibPath)) {
              throw "Bundled raylib not found at $raylibPath"
          }
          Add-Content -Path $env:GITHUB_ENV -Value "RAYLIB_HOME=$raylibPath"
          $nuklearPath = Join-Path $env:GITHUB_WORKSPACE 'include/external'
          if (-not (Test-Path -LiteralPath (Join-Path $nuklearPath 'nuklear.h'))) {
              throw "Nuklear header not found under $nuklearPath"
          }
          Add-Content -Path $env:GITHUB_ENV -Value "NUKLEAR_INCLUDE=$nuklearPath"

      - name: Configure CMake (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: cmake -S . -B build-${{ matrix.build_type }} -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        shell: bash

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: cmake -S . -B build-${{ matrix.build_type }} -G "Ninja" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        shell: pwsh

      - name: Build (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: cmake --build build-${{ matrix.build_type }}
        shell: bash

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: cmake --build build-${{ matrix.build_type }}
        shell: pwsh

      - name: Run unit tests (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: ctest --test-dir build-${{ matrix.build_type }} --output-on-failure
        shell: bash

      - name: Run unit tests (Windows)
        if: matrix.os == 'windows-latest'
        run: ctest --test-dir build-${{ matrix.build_type }} --output-on-failure
        shell: pwsh

      - name: Run Valgrind memory checks
        if: matrix.os == 'ubuntu-latest'
        run: bash scripts/run_memory_checks.sh --build-dir build-${{ matrix.build_type }}
        shell: bash
